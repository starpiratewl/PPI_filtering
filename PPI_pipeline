setwd("D:\\importantbk\\working\\lab_working\\QIAN\\zhou\\20160819_PPI")

################################################################
##111 load the biomaRt
################################################################
library(biomaRt)

## define biomart object
## 1,biomart have changed a lot in the past few months. first we need add host="www.ensembl.org here to indicate the host site.
## 2,listMarts(host = "www.ensembl.org") can tell us the name of the database, we choose the "ENSEMBL_MART_ENSEMBL" here.

mart <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl", host="www.ensembl.org")

################################################################
##222 look for ensemblid through gene name
################################################################

table <- read.csv(file = "GO_genelist.txt", header = F, stringsAsFactor = F, sep = "\t")

genelist <- table$V1

results_genelist <- getBM(attributes = c("ensembl_gene_id", "ensembl_transcript_id", "ensembl_peptide_id","external_gene_name"),filters = "external_gene_name", genelist, mart = mart)



################################################################
##333 get the ensemblid needed
################################################################

feikong_related <- results_genelist[results_genelist$ensembl_peptide_id != "",]


write.table(feikong_related, file = "gene_pepid_list.txt")
write.table(feikong_related$ensembl_peptide_id, file = "pepid_related_list.txt", row.names = F, col.names = F)

## don't remember substitute all the "" in the file, we don't need it in the following grep performing.


################################################################
##444 grep in linux
################################################################
## this step can be done with R in windows, but in linux it is much more efficient.
## linkbase.txt is the file containing all the PPI relations downloaded from STRING.

## Dos2Unix installation
## Download from http://linux.softpedia.com/get/Utilities/Dos2Unix-5519.shtml
## cd /home/star/Downloads
## tar -zxf hd2u-1.0.0.tgz
## cd hd2u-1.0.0
## ./configure
## checking for gcc... no
## checking for cc... no
## checking for cl... no
## configure: error: no acceptable C compoler found in $PATH
##
## yum install gcc
## 
## ./configure
## configure: error: *** libpopt not found
##
## http://rpm.pbone.net/index.php3/stat/4/idpl/17960519/dir/other/com/popt-1.14-2rt.x86_64.rpm.html download popt-1.14-2rt.x86_64.rpm
## cd /home/star/Downloads
## rpm  -ivh popt-1.14-2rt.x86_64.rpm
## file /usr/share/locale/cs/LC_MESSAGES/popt.mo from install of popt-1.14-2rt.x86_64 conflicts with file from package popt-1.13-7.el6.x86_64
## seem to enter an impasse
## actually install dos2unix is very easy in CentOS
## yum install dos2unix
## reference link:http://gagarin.blog.51cto.com/1056957/1549791/


## make the linux can read the file from windows
dos2unix linkbase.txt
dos2unix pepid_related_list.txt

while read pep;do grep -w $pep linkbase.txt;done > gene_pep_filtered_links.txt < pepid_related_list.txt

## trim the file for gene mapping in next step
sed 's/9606.//g' gene_pep_filtered_links.txt filtered_table.txt

## copy this file back to windows for further analysis in cytoscape



################################################################
##555 trim the relations
################################################################
##"filtered_table.txt" file are generated in linux, so when read it, sep = "\t" is not suitable, we use sep = " " here
result_links <- read.csv(file = "filtered_table.txt", header = F, stringsAsFactor = F, sep = " ")

nonre1 <- unique(as.character(factor(result_links [,1])))
nonre2 <- unique(as.character(factor(result_links [,2])))

nonre <- c(nonre1 , nonre2 )

write.table(nonre , file ="nonredundant_id.txt", row.names = F, col.names = F)

## nonre <- read.table(file = "nonredundant_id.txt", header = F, stringsAsFactor = F)$V1

results_id <- getBM(attributes = c("ensembl_gene_id", "ensembl_transcript_id", "ensembl_peptide_id","external_gene_name"),filters = "ensembl_peptide_id", nonre , mart = mart)

mappinglist <- results_id[,c(3,4)]

write.table(mappinglist, file = â€œmappinglist.txt", row.names = F, col.names = F)


test1 <- merge(result_links, mappinglist, by.x = "V1", by.y = "ensembl_peptide_id", all.x = TRUE)


test2 <- merge(test1, mappinglist, by.x = "V2", by.y = "ensembl_peptide_id", all = F)

relation_table <- test2[,-c(1,2)]

##by far , we translate the id relations to gene-symbol relations

################################################################
##555filter the relations, it is to big
################################################################

 relation_table_f <- relation_table[duplicated(apply(cbind(relation_table$external_gene_name.x, relation_table$external_gene_name.y), 1, function(x) paste(min(x), max(x)))),]
 
 > dim(relation_table_f)
[1] 150621     10

> dim(relation_table)
[1] 291006     10

relation_table_f_u <- unique(relation_table_f)

> dim(relation_table_f_u)
[1] 146857     10

> length(relation_table_f_u$external_gene_name.x[relation_table_f_u$external_gene_name.x == "NA"])
[1] 4278
> length(relation_table_f_u$external_gene_name.y[relation_table_f_u$external_gene_name.y == "NA"])
[1] 0

> relation_table_f_u_non <- relation_table_f_u[!is.na(relation_table_f_u$external_gene_name.x),]
> dim(relation_table_f_u_non)
[1] 142579     10

write.table(relation_table_f_u_non, file = "clean.txt", sep = "\t", col.names = T, row.names = F)


